name: Flutter CI

on:
  push:
    tags:
      - "v*.*.*" # Matches version tags like v1.0.0
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      build_type:
        description: "Choose build type (debug or release)"
        required: true
        type: choice
        default: "release"
        options:
          - "release"
          - "debug"
      runner:
        description: "Choose runner (self-hosted or ubuntu-latest)"
        required: true
        type: choice
        default: "ubuntu-latest"
        options:
          - "ubuntu-latest"
          - "self-hosted"

jobs:
  build-and-release:
    name: Build and Upload APK
    runs-on: ${{ github.event.inputs.runner }}

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      # Step 2: Set up Java
      - name: Set up Java
        uses: actions/setup-java@v4.6.0
        with:
          distribution: "zulu"
          java-version: "17"

      # Step 3: Set up Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2.18.0
        with:
          flutter-version: "3.27.0"

      # Step 4: Validate Flutter installation
      - name: Validate Flutter setup
        run: flutter doctor -v

      # Step 5: Cache Flutter dependencies
      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-cache-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pub-cache

      # Step 6: Install dependencies
      - name: Install dependencies
        run: flutter pub get

      # Step 7: Run Flutter tests (for PRs)
      - name: Run Flutter Tests
        if: ${{ github.event_name == 'pull_request' }}
        run: flutter test

      # Step 8: Build APK (based on input)
      - name: Build APK
        run: flutter build apk --${{ github.event.inputs.build_type }}

      # Step 9: Extract Tag Name (for release builds)
      - name: Extract Tag Name
        if: startsWith(github.ref, 'refs/tags/')
        id: extract_tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      # Step 10: Create GitHub Release (for tagged commits)
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/') && github.event.inputs.build_type == 'release'
        id: create_release
        uses: softprops/action-gh-release@v2.2.0
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: Release ${{ env.TAG_NAME }}
          body: |
            Automated release for version ${{ env.TAG_NAME }}.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 11: Upload APK to Release (for tagged commits)
      - name: Upload APK to Release
        if: startsWith(github.ref, 'refs/tags/') && github.event.inputs.build_type == 'release'
        uses: actions/upload-release-asset@v1.0.2
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/app-${{ github.event.inputs.build_type }}.apk
          asset_name: app-${{ github.event.inputs.build_type }}.apk
          asset_content_type: application/vnd.android.package-archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 12: Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-${{ github.event.inputs.build_type }}.apk
          path: build/app/outputs/flutter-apk/app-${{ github.event.inputs.build_type }}.apk
